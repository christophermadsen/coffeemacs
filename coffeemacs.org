#+TITLE: Coffeemacs Configuration
#+AUTHOR: Christopher Buch Madsen (Whiskeybear)

* Introduction

Welcome to Coffeemacs - an Emacs configuration for Windows tailored to serve a
delightful development experience on Windows. This is the main file for the
customization of coffeemacs. Keybindings are at the bottom of the file.

* General Setup
** Color Themes

#+begin_src emacs-lisp :results silent
(use-package doom-themes
  :ensure t)

(use-package solarized-theme
  :ensure t)

(defun light ()
  "Turn on light theme."
  (interactive)
  (load-theme 'doom-solarized-light t))

(defun dark ()
  "Turn on dark theme."
  (interactive)
  (load-theme 'doom-material-dark t))
#+end_src

Color themes may sometimes ruin the formatting of =org-babel= code block
outputs in =org-mode=, the following is a fix to that.

#+begin_src emacs-lisp :results silent
(defun display-ansi-colors ()
  (interactive)
  (ansi-color-apply-on-region (point-min) (point-max)))

(add-hook 'org-babel-after-execute-hook #'display-ansi-colors)
#+end_src

** Font

Monocode, a variant of Iosevka: https://github.com/aaronmbos/monocode:

#+begin_src emacs-lisp :results silent
(set-face-attribute 'default nil :family "Monocode" :height 85)
#+end_src

** Lots of Settings That Make Emacs a Preciser and Nicer Environment

#+begin_src emacs-lisp :results silent
;; Automatically create missing parents when making a new file
(defun my-create-non-existent-directory ()
      (let ((parent-directory (file-name-directory buffer-file-name)))
        (when (and (not (file-exists-p parent-directory))
                   (y-or-n-p (format "Directory `%s' does not exist! Create it?" parent-directory)))
          (make-directory parent-directory t))))
(add-to-list 'find-file-not-found-functions #'my-create-non-existent-directory)

(menu-bar-mode -1) ;; Disables the menu bar
(scroll-bar-mode -1) ;; Disables the scrollbar
(tool-bar-mode -1) ;; Disables the toolbar
(show-paren-mode 1) ;; highlight matching parentheses
(setopt use-short-answers t) ;; y-n for yes-no
(global-display-line-numbers-mode +1) ;; Show line numbers in all modes
(electric-pair-mode +1) ;; Pair parentheses
(global-visual-line-mode t) ;; Wraps lines to fit a window
(setq system-time-locale "C") ;; Make sure all Emacs functionalities is English

;; Scrolling
(setq mouse-wheel-scroll-amount '(0.03)) ;; 3 lines at a time
(setq mouse-wheel-progressive-speed nil) ;; Don't accelerate scrolling
(setq mouse-wheel-follow-mouse t) ;; Scroll window under mouse
(setq-default pixel-scroll-precision-mode t) ;; Smooth scrolling over images
(setq ring-bell-function 'ignore)

;; Frame Title
(setq frame-title-format
      '("emacs: " (:eval (if (buffer-file-name)
                             (abbreviate-file-name (buffer-file-name)) "%b"))))

;; Startup window size
(set-frame-height (selected-frame) 60)
(set-frame-width (selected-frame) 200)

;; Defaults
(setq-default
 message-log-max 1000
 cursor-type 'bar ;; Make cursor a bar
 fill-column 79 ;; Break line at 79 chars, use M-q
 standard-indent 4 ;; How many spaces to use for a tab
 tab-always-indent 'complete ;; Will either complete or indent depending on the context
 indent-tabs-mode nil ;; Prevents Emacs from replacing multiple spaces with tabs
 indicate-empty-lines t ;; Shows empty lines
 use-dialog-box nil ;; Prevents Emacs UI dialog pop ups
 column-number-mode t ;; Columns numbers

 ;; Some Emacs files version control
 delete-old-versions t ;; Deletes old versions
 kept-new-versions 6
 kept-old-versions 2
 version-control t
 vc-make-backup-files t
 backup-directory-alist '((".*" . "~/.emacs.d/emacs-backups")) ;; Assuming .emacs.d placement

 ;; Calendar settings
 european-calendar-style t
 calendar-date-style 'european
 calendar-week-start-day 1

 ;; Time and date display settings
 display-time-24hr-format t
 display-time-day-and-date t
 display-time-string-forms
 '((if (and (not display-time-format) display-time-day-and-date)
       (format-time-string "%a %b %e " now) "")
   (format-time-string (or display-time-format
                           (if display-time-24hr-format "%H:%M" "%-I:%M%p"))
                       now))
 calendar-time-display-form
 '(24-hours ":" minutes
            (if time-zone " (") time-zone (if time-zone ")"))

 ;; Some ibuffer formatting
 ibuffer-use-other-window t
 ibuffer-formats
 '((mark modified read-only locked
         " " (name 36 36 :left :elide)
         " " (size 9 -1 :right)
         " " (mode 16 16 :left :elide) " " filename-and-process)
   (mark " " (name 16 -1) " " filename))
 ) ;; end of setq-default
#+end_src

** Improvements to the DIRED

Adds some neat functionalities to the dired.

#+begin_src emacs-lisp :results silent
(load "dired-x")
(add-hook 'dired-load-hook
          (lambda ()
            (setq dired-dotfiles-show-p t
                  dired-listing-switches "-alh"
                  dired-omit-files (concat
                                    dired-omit-files
                                    "\|"
                                    (rx (or (: bos (or "\.DS_Store"
                                                       "__MACOSX"
                                                       "ltximg"
                                                       ".git"
                                                       ".dvc")
                                               eos)
                                            (: bos "__pycache__"
                                               "_minted-"
                                               "\.~lock\."
                                               "!.*pdf$")
                                            ".ipynb_checkpoints" "\.~.*#")))
                  dired-omit-extensions
                  (append dired-omit-extensions
                          '("orgx" "pyc" "pyo" "lprof" "bak")))))

(setq dired-listing-switches "-alh")
(add-hook 'dired-after-readin-hook 'dired-omit-mode)
#+end_src

* Straight

#+begin_src emacs-lisp :results silent
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name
        "straight/repos/straight.el/bootstrap.el"
        (or (bound-and-true-p straight-base-dir)
            user-emacs-directory)))
      (bootstrap-version 7))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

* Org-mode Config and Specifics

: ORG-MODE SETUP
Fix for org-roam bug as of 8/8/23 see this github issue:
https://github.com/org-roam/org-roam/issues/2361. The easiest fix was to
specify a slightly older version of org in the straight 'lockfile' at
straight/versions/default.el

#+begin_src emacs-lisp :results silent
;; fix for org-roam bug
;; (setq straight-lockfile-dir "~/.emacs.d/straight/versions/")
;; (if (not (file-directory-p straight-lockfile-dir))
;;     (make-directory straight-lockfile-dir))
;; (copy-file ~/.emacs.d/bugfix.el (concat straight-lockfile-dir "default.el"))
#+end_src

** Org-mode Loading with Straight

#+begin_src emacs-lisp :results silent
(straight-use-package 'org)
(use-package org
  :demand t
  :custom (org-export-backends '(ascii html icalendar odt md org))
  :hook (org-mode . turn-on-auto-fill)
  :config
  (setq org-todo-keywords
        '((sequence "ONGOING(o!)" "TODO(t!)" "VERIFY(v@)" "REVIEW(r!)" "HOLD/WAIT(h@)" "WISHLIST(w!)"
                    "|" "DONE(d)" "DELEGATED" "DROPPED" "DECLINED(f@)"))
        org-time-stamp-custom-formats '("<%a %d %B>" . "<%d %b %a %H:%M>")
        org-export-allow-bind-keywords t
        org-src-preserve-indentation t
        org-src-window-setup 'current-window
        org-log-done 'time
        org-log-into-drawer t
        org-confirm-babel-evaluate nil
        ;; Use relative links for org-insert-link
        org-link-file-path-type 'relative
        ;; Indent org file according to heading levels
        org-startup-indented t
        ;; Allow for inline display of remote images
        org-display-remote-inline-images 'cache
        ;; Display images when starting up an org file including them
        org-startup-with-inline-images t
        ;; Allow Special Symbol Insertion Like Latex and HTML in Org
        org-pretty-entities t)
        

  ;; Refresh inline images after executing a block
  (add-hook 'org-babel-after-execute-hook
            (lambda () (org-display-inline-images nil t)))

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (sql . t)
     (python . t)
     (jupyter . t)
     )))

;; Don't execute all code blocks when exporting
(setq org-export-babel-evaluate nil)

;; Modify options in org-insert-structure-template
(with-eval-after-load 'org
  ;; Add a new template
  (add-to-list 'org-structure-template-alist
               '("S" . "src"))
  (add-to-list 'org-structure-template-alist
               '("j" . "src emacs-lisp"))

  ;; Modify an existing template (e.g., changing the src block for "s" to include "python" by default)
  (setq org-structure-template-alist
        (mapcar (lambda (element)
                  (if (string-equal (car element) "s")
                      '("s" . "src python")
                    element))
                org-structure-template-alist)))
#+end_src

** Remove Confirmation for Running org-babel Code Blocks

#+begin_src emacs-lisp :results silent
(setq org-confirm-babel-evaluate nil)
#+end_src

** Get the Theme Colors for org-babel Code Blocks

#+begin_src emacs-lisp :results silent
(require 'color)
(set-face-attribute 'org-block nil :background
                    (color-darken-name
                     (face-attribute 'default :background) 3))
#+end_src

** Fix org-babel Block Indentation

#+begin_src emacs-lisp :results silent
(setq-default org-src-preserve-indentation t)
#+end_src

** Prevent Inline Images Actual Width

The following stops org from making inline images their actual widths. Use
=#+ATTR_ORG: :width some-number= at the top of an image link instead.

#+begin_src emacs-lisp :results silent
(setq org-image-actual-width nil)
#+end_src

** Change the org-ellipsis Symbol for Collapsed Headers to Something Else

#+begin_src emacs-lisp :results silent
;; (setq org-ellipsis " ↴")
(setq org-ellipsis " ⊻")
#+end_src

** Add a :hidden Header to org-babel Code Blocks

Thanks to [[https://emacs.stackexchange.com/questions/44914/choose-individual-startup-visibility-of-org-modes-source-blocks][this stackoverflow link]].

#+begin_src emacs-lisp :results silent
(defun individual-visibility-source-blocks ()
  "Fold some blocks in the current buffer."
  (interactive)
  (org-show-block-all)
  (org-block-map
   (lambda ()
     (let ((case-fold-search t))
       (when (and
              (save-excursion
                (beginning-of-line 1)
                (looking-at org-block-regexp))
              (cl-assoc
               ':hidden
               (cl-third
                (org-babel-get-src-block-info))))
         (org-hide-block-toggle))))))

(add-hook
 'org-mode-hook
 (function individual-visibility-source-blocks))
#+end_src

** UTF-8 Encoding (And UTF-16 for Windows)

https://rufflewind.com/2014-07-20/pasting-unicode-in-emacs-on-windows

#+begin_src emacs-lisp :results silent
(set-selection-coding-system 'utf-16-le) ;; Windows API is built on UTF-16
(set-language-environment "UTF-8")
(setq uniquify-buffer-name-style 'forward
      locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+end_src

** DROPPED Org-superstar For Pretty Headers

Visual headers (utf-8 bullets) for =org-mode=

#+begin_src emacs-lisp :results silent
;; (use-package org-superstar
;;   :ensure t)
;; (require 'org-superstar)
;; (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))

;; (with-eval-after-load 'org-superstar
;;   (set-face-attribute 'org-superstar-item nil :height 1.2)
;;   (set-face-attribute 'org-superstar-header-bullet nil :height 1.2)
;;   (set-face-attribute 'org-superstar-leading nil :height 1.3))
;; ;; Set different bullets, with one getting a terminal fallback.
;; (setq org-superstar-headline-bullets-list
;;   '( "◙" "●" "◕" "◑" "◔" "◎" "○" "◌")) ;; Circles
;;   ;; '("⭓" "⭔" "◆" "◇" "▶" "▷")) ;; Geometric shapes
;;   ;; '("▢" "⚀" "⚁" "⚂" "⚃" "⚄" "⚅" "▣")) ;; Dice
;;   ;; '("◉" "◈" "▣" "○" "◇" "▢" "▷")) ;; Geometric shapes 2
;;   ;; '("✺" "✹" "✸" "✷" "✶" "✦" "✧")) ;; Stars
;;   ;; '("✽" "✾" "✿" "❀" "❃" "❉")) ;; Flowers
;;   ;; '("※" "⁜" "⁂" "⁘" "⁙" "▷")) ;; Symbols and asterisks
;;   ;; '("⭓" "⭔" "⭗" "⭖" "⬭" "⯍" "⯏")) ;; Misc.

;; ;; Stop cycling bullets to emphasize hierarchy of headlines.
;; (setq org-superstar-cycle-headline-bullets nil)

;; ;; Hide away leading stars on terminal.
;; (setq org-superstar-leading-fallback ?\s)
#+end_src

Unfortunately =org-superstar= breaks the colored error message output of source
blocks, so we need to add a workaround. See the following issue:
https://github.com/emacs-jupyter/jupyter/issues/366#issuecomment-985758277.

The following is a fix for that issues:

#+begin_src emacs-lisp :results silent
;; (defun display-ansi-colors ()
;;   (interactive)
;;   (ansi-color-apply-on-region (point-min) (point-max)))

;; (add-hook 'org-babel-after-execute-hook #'display-ansi-colors)
#+end_src

** Org-roam (Zettelkasten Note Taking)

Org-roam is a library with broad functionality, but is extremely useful for
taking notes with the Zettelkasten method.

#+begin_src emacs-lisp :results silent
;;;; ORG-ROAM
(defvar org-notes-dir "~/fooly-cooly/"
  "The directory for storing org-roam notes.")
(if (not (file-directory-p org-notes-dir))
    (make-directory org-notes-dir))
#+end_src

#+begin_src emacs-lisp :results silent
(use-package org-roam
  :ensure t
  :custom
  (org-roam-directory (file-truename org-notes-dir))
  :bind (("C-c r l" . org-roam-buffer-toggle)
         ("C-c r f" . org-roam-node-find)
         ("C-c r g" . org-roam-graph)
         ("C-c r i" . org-roam-node-insert)
         ("C-c r a" . org-roam-alias-add)
         ("C-c r c" . org-roam-capture)
         ("C-c r t" . org-roam-tag-add)
         ;; Dailies
         ("C-c r j" . org-roam-dailies-capture-today))
  :config
  ;; If you're using a vertical completion framework, you might want a more informative completion interface
  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  (org-roam-db-autosync-mode 1)
  ;; If using org-roam-protocol
  (require 'org-roam-protocol))

(add-to-list 'display-buffer-alist
             '("\\*org-roam\\*"
               (display-buffer-in-direction)
               (direction . right)
               (window-width . 0.33)
               (window-height . fit-window-to-buffer)))
#+end_src

Add option for daily logs 

#+begin_src emacs-lisp :results silent
;; ;; Setup for writing daily logs
;; (setq org-daily-log-dir "~/daily-logs/")
;; (if (not (file-directory-p org-daily-log-dir))
;;     (make-directory org-daily-log-dir))
;; (setq org-roam-dailies-directory org-daily-log-dir)
;; (setq org-roam-dailies-capture-templates
;;       '(("d" "default" entry
;;          "* Previous Workday\n- %?\n\n* Today\n+ "
;;          :target (file+head "%<%A-%Y-%m-%d>.org"
;;                             "#+title: %<Daily Log %A-%Y-%m-%d>\n"))))
;; END - ORG-ROAM
#+end_src

** Org-modern

A library that makes org-mode files a whole lot prettier.

#+begin_src emacs-lisp :results silent
(use-package org-modern
  :ensure t
  :after org
  :hook ((org-mode . org-modern-mode)
         (org-roam-mode . org-modern-mode)
         (org-agenda-finalize . org-modern-agenda))
  :config
  (set-face-attribute 'org-modern-symbol nil :family "Monocode" :height 1.2)
  (setq
   ;; Edit settings
   org-auto-align-tags nil
   org-tags-column 0
   org-catch-invisible-edits 'show-and-error
   org-special-ctrl-a/e t
   org-insert-heading-respect-content t
   ;; org-modern-table-vertical 1
   ;; org-modern-table-horizontal 1
   org-modern-variable-pitch 'fixed-pitch
   org-modern-star ["◙" "●" "◕" "◑" "◔" "◎" "○" "◌"]
   ;; Agenda styling
   org-agenda-tags-column 0
   org-agenda-block-separator ?─
   org-agenda-time-grid
   '((daily today require-timed)
     (800 1000 1200 1400 1600 1800 2000)
     " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
   org-agenda-current-time-string
   "◀── now ─────────────────────────────────────────────────")
  ;; Set org-modern in all org buffers
  (global-org-modern-mode)  
  :custom
  (org-modern-block-fringe 10)
  (custom-set-variables '(org-modern-table nil))
  :custom-face
  (org-modern-label
    ((t :height 1.0 :weight semi-bold :underline nil :inherit default)))
  )
#+end_src

** Org-mode skeletons / templates

For date insertion into templates:

#+begin_src emacs-lisp :results silent
(require 'calendar)
#+end_src

*** Template for Job Hunting Notes

#+begin_src emacs-lisp :results silent
(define-skeleton post-job-application-doc
  "In-buffer settings info for a emacs-org file."
  "Skeleton for documented a job application"
  (concat "Location: \n"
          "Type: \n"
          "Department: \n"
          "Position: \n"
          "Requirements: \n"
          "\n"
          "Why did I apply?: \n"))
#+end_src

*** Generic Template for Python org-mode reports

#+begin_src emacs-lisp :results silent
(define-skeleton report-template
  "Template for experiment reports."
  ""
  (concat "#+TITLE: " (skeleton-read "Title: ") "\n"
          "#+AUTHOR: " user-full-name "\n"
          "#+EMAIL: "  user-mail-address "\n"
          "#+DATE: " (calendar-date-string (calendar-current-date) nil) "\n"
          "#+STARTUP: showall" "\n"
          "#+PROPERTY: header-args :exports both "
          ":session " (skeleton-read "Session Name: ")
          " :kernel " (skeleton-read "Jupyter Kernel Name (optional): ")
          " :cache no" "\n"
          ":PROPERTIES:" "\n"
          "#+OPTIONS: ^:nil" "\n"
          ":END:" "\n\n"
          "* TODO Introduction\n"
          "* Imports and Environment Variables\n"
          ":PROPERTIES:" "\n"
          ":visibility: folded" "\n"
          ":END:" "\n"
          "#+name: imports" "\n"
          "#+begin_src python :results silent" "\n\n"
          "#+end_src" "\n\n"
          "#+name: env" "\n"
          "#+begin_src python :results silent" "\n\n"
          "#+end_src" "\n\n"
          "* TODO Conclusion"))
#+end_src

#+begin_src emacs-lisp :results silent
(defun setup-report-refresh-buffer ()
    "Revert buffer without confirmation.
Used to ensure session parameters are usable immediately."
    (interactive)
    (report-template)
    (save-buffer)
    (revert-buffer :ignore-auto :noconfirm))
#+end_src

* Various Useful Packages
** Hydra

For help and functionality inside org jupyter-python src blocks

#+begin_src emacs-lisp :results silent
(use-package hydra
  :ensure t)
#+end_src

** Json-mode

Mode for viewing and editing json files

#+begin_src emacs-lisp :results silent
(use-package json-mode
  :ensure t)
#+end_src

** Yaml-mode

Mode for viewing and editing yaml files

#+begin_src emacs-lisp :results silent
(use-package yaml-mode
  :ensure t
  :mode "\\.dvc\\'"
  :mode "/Dvcfile\\'")
#+end_src

** Which-key

Shows your keybindings following what you've currently entered.

#+begin_src emacs-lisp :results silent
(use-package which-key
  :ensure t
  :config (which-key-mode))
#+end_src

** Beacon

Highlights your cursor when you jump around a file

#+begin_src emacs-lisp :results silent
(use-package beacon
  :ensure t
  :config (beacon-mode 1))
#+end_src

** Helpful (a package)

An extension to the default help =(C-h)= in Emacs

#+begin_src emacs-lisp :results silent
(use-package helpful
  :ensure t
  :bind (("C-h j" . helpful-at-point)
         ("C-h f" . helpful-callable)
         ("C-h v" . helpful-variable)
         ("C-h k" . helpful-key)
         ("C-c C-d" . helpful-at-point)
         ("C-h F" . helpful-function)))
#+end_src

** Deadgrep

Alternative fast way to search with R.I.P grep

#+begin_src emacs-lisp :results silent
(use-package deadgrep
  :ensure t
  :commands deadgrep
  :bind ("C-c s" . deadgrep))
#+end_src

** Crux

Gives some useful commands / keybindings

#+begin_src emacs-lisp :results silent
(use-package crux
  :ensure t)
#+end_src

** Highlight-thing

Highlights the same instances of a symbol/word. Some words are filtered.

#+begin_src emacs-lisp :results silent
(use-package highlight-thing
  :ensure t
  :hook ((prog-mode . highlight-thing-mode)
         (org-mode . highlight-thing-mode))
  :config
  (setq highlight-thing-exclude-thing-under-point t
        highlight-thing-case-sensitive-p t
        highlight-thing-ignore-list '("False" "True", "return", "None", "if", "else", "self", "import", "from", "in", "def", "class")))
#+end_src

** Projectile

Project management. Makes it super easy to find files in a project

#+begin_src emacs-lisp :results silent
(use-package projectile
  :ensure t
  :config
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+end_src

** All-the-icons

Icons when needed

#+begin_src emacs-lisp :results silent
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))
#+end_src
** Nerd-icons

Provides specific icons, used for example by [[*Dashboard][Dashboard]]

#+begin_src emacs-lisp :results silent
(use-package nerd-icons
  :ensure t)
#+end_src
** Dashboard

#+begin_src emacs-lisp :results silent
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook)
  :diminish
  (dashboard-mode page-break-lines-mode)
  :custom
  (dashboard-center-content t)
  (dashboard-startup-banner 4)
  (dashboard-items '((recents . 10)))
  (dashboard-icon-type 'nerd-icons)
  (dashboard-set-heading-icons t)
  (dashboard-set-file-icons t)
  :custom-face
  (dashboard-heading ((t (:foreground "#f1fa8c" :weight bold))))
  :hook
  (after-init . dashboard-setup-startup-hook))

(setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
(setq dashboard-banner-logo-title "Aah, you're back. Drink your coffee while it's warm . . .")
(setq dashboard-startup-banner "~/.emacs.d/coffee-isometric-dashboard.png")

 ;; Use `nerd-icons' package, we're using this for DOOM modeline too
;; (setq dashboard-icon-type 'nerd-icons)
;; (setq dashboard-set-heading-icons t)
;; (setq dashboard-set-file-icons t)
;; (setq dashboard-heading-icons nil) 
;;;; END - DASHBOARD
#+end_src

** Vertico

Auto-completion in the mini-buffer, e.g. the file finder.

#+begin_src emacs-lisp :results silent
(use-package vertico
  :ensure t
  :init
  (vertico-mode))

  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)

  ;; Show more candidates
  ;; (setq vertico-count 20)

  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  ;; (setq vertico-cycle t)
  ;; )
#+end_src

** Savehist (for Vertico)

Package for persisting history over Emacs restarts. [[*Vertico][Vertico]] as an example,
sorts by history position.

#+begin_src emacs-lisp :results silent
(use-package savehist
  :ensure t
  :init
  (savehist-mode))
#+end_src

** Orderless (for Vertico)

Optionally use the =orderless= completion style for [[*Vertico][Vertico]].

#+begin_src emacs-lisp :results silent
(use-package orderless
  :ensure t
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Anzu

Tracking search count/numbers, for example with default =(C-s)=

#+begin_src emacs-lisp :results silent
(use-package anzu
  :ensure t
  :init
  (global-anzu-mode +1))
#+end_src

** Windows PowerShell in Emacs

#+begin_src emacs-lisp :results silent
(use-package powershell
  :straight t)
#+end_src

** Centered Window

Makes it possible to center buffer content in the window

#+begin_src emacs-lisp :results silent
(use-package centered-window
  :ensure t)
#+end_src

** DOOM MODELINE : A Better Looking Mode Line

#+begin_src emacs-lisp :results silent
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom
  (doom-modeline-buffer-file-name-style (quote truncate-with-project))
  (doom-modeline-env-python-executable "python3")
  :config
  ;; Add pythonic support to modeline
  (doom-modeline-def-env python
    :hooks   'python-mode-hook
    :command (lambda ()
               (cond ((and (fboundp 'pipenv-project-p)
                           (pipenv-project-p))
                      (list "pipenv" "run"
                            (or doom-modeline-env-python-executable
                                python-shell-interpreter
                                "python")
                            "--version"))
                     ((executable-find "pyenv") (list "pyenv" "version-name"))
                     ((not (null python-shell-virtualenv-root))
                      (list "echo"
                            (format
                             "(%s)"
                             (car (last (split-string python-shell-virtualenv-root "/" 't))))))
                     ((list (or doom-modeline-env-python-executable
                                python-shell-interpreter
                                "python")
                            "--version"))))
    :parser  (lambda (line) (let ((version (split-string line)))
                              (if (length> version 1)
                                  (cadr version)
                                (car version))))))
#+end_src

** Esup : An Emacs startup profiler

Startup profiling tool - Use =(C-u M-x esup)= to profile any elisp file, not
just init.el

#+begin_src emacs-lisp :results silent
(use-package esup
  :ensure t
  :config (setq esup-depth 0))
#+end_src
** Markdown-mode

A major mode for editing and handling markdown files.

: prerequisites
pandoc (https://pandoc.org/installing.html)

#+begin_src emacs-lisp :results silent
(use-package markdown-mode
  :ensure t
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "pandoc")
  :bind (:map markdown-mode-map
              ("C-c C-e" . markdown-do)))
#+end_src

** Ox-gfm

Package for circular github-flavoured markdown export

#+begin_src emacs-lisp :results silent
(use-package ox-gfm
  :ensure t)
#+end_src

** Markdown-toc

Package to automatically generate markdown table-of-contents (TOC)

#+begin_src emacs-lisp :results silent
(use-package markdown-toc
  :ensure t)
#+end_src

** Package-linter

Linting for Emacs packages

#+begin_src emacs-lisp :results silent
(use-package package-lint
  :ensure t)
#+end_src

** Treemacs

Gives a tree-view of the working directory, bind on/off to <F5>

#+begin_src emacs-lisp :results silent
(use-package treemacs
  :ensure t
  :bind ("<f5>" . treemacs))
#+end_src

** Solaire-mode

Make it easier to distinguish between "real" buffers and spawned ones by giving
the latter a lighter (or darker) colour. Some of the config is for ensuring it
works with =treemacs==.

#+begin_src emacs-lisp :results silent
(use-package solaire-mode
  :ensure t
  :hook (after-init . solaire-global-mode)
  :config
  (push '(treemacs-window-background-face . solaire-default-face) solaire-mode-remap-alist)
  (push '(treemacs-hl-line-face . solaire-hl-line-face) solaire-mode-remap-alist))

;; Adding to "real" solaire buffers
(defun real-buffer-p ()
  (or (solaire-mode-real-buffer-p)
      (equal (buffer-name) "*dashboard*")))
(setq solaire-mode-real-buffer-fn #'real-buffer-p)

(defun my/solaire-mode-real-buffer-p ()
  "Enhanced version of `solaire-mode-real-buffer-p'.
Treats buffers with specific names as 'real' buffers."
  (or (solaire-mode-real-buffer-p) ; Call the original function first
      (member (buffer-name)        ; Then check if the current buffer's name
              '("*scratch*" "*dashboard*" "*Messages*")))) ; is one of these

;; Tell solaire-mode to use this function to identify real buffers
(setq solaire-mode-real-buffer-fn #'my/solaire-mode-real-buffer-p)
#+end_src

* Programming Specifics
** Company : Programming Auto-completion (For Example in Python)

Auto-completion, only hooks to programming modes, minibuffer uses Vertico.

#+begin_src emacs-lisp :results silent
(use-package company
  :ensure t
  :demand t
  :commands company-indent-or-complete-common
  :hook ((prog-mode . company-mode)
         (inferior-python-mode . company-mode)
         (org-mode . company-mode))
  :init
  (setq
  company-backends '(company-capf company-files)
  ;; From DOOM
  ;; Only search the current buffer for `company-dabbrev' (a backend that
  ;; suggests text your open buffers). This prevents Company from causing
  ;; lag once you have a lot of buffers open.
  company-dabbrev-other-buffers nil

  ;; Make `company-dabbrev' fully case-sensitive, to improve UX with
  ;; domain-specific words with particular casing.
  company-dabbrev-ignore-case nil
  company-dabbrev-downcase nil))
#+end_src

* SQL Specifics

Formatting for SQL code:

#+begin_src emacs-lisp :results silent
(use-package sqlformat
  :ensure t
  :config (setq sqlformat-command 'pgformatter
                sqlformat-args '("-w79" "-s2"))
  :init (add-hook 'sql-mode-hook #'sqlformat-on-save-mode))
#+end_src

SQL in org code blocks:

#+begin_src emacs-lisp :results silent
(use-package ob-sql-mode
  :ensure t)
#+end_src

* Python Specifics

See https://sqrtminusone.xyz/posts/2021-05-01-org-python/

** Jupyter - Overrides Standard Python in org-babel Code Blocks

#+begin_src emacs-lisp :results silent
(use-package jupyter
  :straight t
  :demand t
  :after (:all org python)
  :config
  (setq org-babel-default-header-args:jupyter-python
        '((:session . "py")
          (:kernel . "python3")
          (:async . "yes")))
  (org-babel-jupyter-override-src-block "python") ;; Get normal python src blocks to use jupyter-python
  )

;; Refreshes kernels when switching envs
(defun my/jupyter-refresh-kernelspecs ()
  "Refresh Jupyter kernelspecs."
  (interactive)
  (jupyter-available-kernelspecs t))

;;;; OVERRIDE BASE PYTHON WITH JUPYTER KERNELS
(defvar jupyter-python-override t "Flag to override python src blocks to jupyter.")
#+end_src

** DROPPED Old Python Formatting with Black and Isort
: Prerequisites
black, isort

#+begin_src emacs-lisp :results silent
;; ;; This is the basic emacs python IDE, worth a try if all else doesn't work.
;; (use-package elpy
;;   :ensure t
;;   :init
;;   (elpy-enable))
#+end_src

#+begin_src emacs-lisp :results silent
;; Using isort for clean-up commands (Make sure to pip install isort)
;; (use-package py-isort-windows
;;     :hook (before-save . py-isort-before-save)
;;     :config
;;     (setq py-isort-options '("-l=79" "-m=3" "--tc" "--ca")))
#+end_src

Remove unused or add missing python imports:

#+begin_src emacs-lisp :results silent
;; (use-package pyimport
;;   :ensure t)
#+end_src

Black python formatting (Make sure to pip install black):

#+begin_src emacs-lisp :results silent
;; (use-package python-black
;;   :demand t
;;   :after python
;;   :config (setq python-black-extra-args '("-l" "79"))
;;   :hook (python-mode . python-black-on-save-mode))
#+end_src

#+begin_src emacs-lisp :results silent
;; Inside org src blocks we need to use python-black-region instead
;; Requires pip install black-macchiato for that to work
;; (defun format-src-block ()
;;   "Run black on an org source block."
;;   (interactive)
;;   ;; save-excursion is somehow overwritten, hence move point back manually
;;   ;;(save-excursion
;;   (let ((p (point)))
;;     (org-babel-mark-block)
;;     (let ((lang (nth 0 (org-babel-get-src-block-info))))
;;       (when (string-equal lang "python")
;;         (python-black-partial-dwim)        
;;         (py-isort-region))      
;;       (when (string-equal lang "sql")
;;         (call-interactively 'sqlformat)))
;;     (deactivate-mark)
;;     (goto-char p)))
#+end_src

#+begin_src emacs-lisp :results silent
;; Toggle black formatting when saving for python code
;; (defun toggle-black-on-save ()
;;   (interactive)
;;   (if (member 'python-black-on-save-mode python-mode-hook)
;;       (progn
;;         (message "Black on save.")
;;         (remove-hook 'python-mode-hook 'python-black-on-save-mode))
;;     (message "No black on save.")
;;     (add-hook 'python-mode-hook 'python-black-on-save-mode)))
#+end_src

** Formatting and Linting
*** Lazy-ruff - Python formatter/linter

An integration (created by me) for formatting and linting Python with =ruff=.

: Prerequisties
+ An install of ruff (https://docs.astral.sh/ruff/) that is on the system PATH

#+begin_src emacs-lisp :results silent
(use-package lazy-ruff
  :ensure t
  :bind (("C-c f" . lazy-ruff-lint-format-dwim)) ;; keybinding
  :config
  ;; Set your custom ruff config here
  (setq lazy-ruff-check-command
        (concat "ruff check --fix --unsafe-fixes -s "
                "--preview "
                "--line-length=79 "
                "--select ALL "
                "--ignore E266,E402,E731,F403,F405,D100,D104,D401,T203,T201,F401,FA102"))
  (setq lazy-ruff-format-command "ruff format --line-length=79 -s")
  ;; Enable toggle-lazy-ruff-global-mode
  (lazy-ruff-global-mode t))
#+end_src

*** Python-docstring formatting

#+begin_src emacs-lisp :results silent
(use-package python-docstring
  :ensure t
  :hook (python-mode . python-docstring-mode))
#+end_src

** Anaconda Mode (Used with company-anaconda)

We can use this for company-anaconda.

#+begin_src emacs-lisp :results silent
(use-package anaconda-mode
  :hook ((python-mode . anaconda-mode)
         (python-mode . anaconda-eldoc-mode)
         ;; Seems to work in jupyter repl, but not inferior python
         (jupyter-repl-mode . anaconda-eldoc-mode)
         (jupyter-org-interaction-mode . anaconda-eldoc-mode)))
#+end_src

** Company-anaconda (Used for Company)

Using an =Anaconda= backend for the [[*Company : Programming Auto-completion (For example in Python)][Company]] autocompletion in Python.

#+begin_src emacs-lisp :results silent
(use-package company-anaconda
  :ensure t
  :demand t
  :after (python company)
  :config
  (add-to-list 'company-backends 'company-anaconda))
#+end_src

** Python Major Mode Config

Configure some settings for python mode (notice the use of ipython for the
shell, [[*Jupyter - Overrides standard python in org-babel code blocks][this is not what we use]] in =org-babel= blocks)

#+begin_src emacs-lisp :results silent
(use-package python
  :mode ("\\.py\\'" . python-mode)
  :interpreter ("python" . python-mode)
  :config
  (setq-default python-indent-offset 4)
  (setq python-shell-interpreter "ipython"
        python-shell-interpreter-args "--simple-prompt --classic"
        ;; guess indents, but don't show message in minibuffer
        python-indent-guess-indent-offset t
        python-indent-guess-indent-offset-verbose nil
        ;; One less newline at end of docstrings
        python-fill-docstring-style 'pep-257-nn)
  ;; Some faster navigation, these keys are otherwise unbound
  :bind (:map python-mode-map
              ("M-n" . 'python-nav-forward-defun)
              ("M-p" . 'python-nav-backward-defun)
              ("C-M-n" . 'python-nav-forward-statement)
              ("C-M-p" . 'python-nav-backward-statement)))
              ;; ("C-c f" . 'python-black-buffer)))

;; Remove indent guessing warning
(setq python-indent-guess-indent-offset-verbose nil)
#+end_src

** Flycheck - Syntax Checking in Python Files

Syntax Checking - You may need to go to "Manage App Execution Aliases" in
Windows and turn it off for the "App Installer python.exe" and "python3.exe"
for this to work without error.

#+begin_src emacs-lisp :results silent
(use-package flycheck
  :ensure t
  :demand t
  :config
  (add-to-list 'flycheck-disabled-checkers 'python-pylint) ;; Remove pylint and use flake8
  (add-hook 'prog-mode-hook #'flycheck-mode))

;; User flake8, this can be removed if an appropriate system python has Nflake8 installed
;; (setq flycheck-python-flake8-executable "~/AppData/Local/Programs/Python/Python312/Lib/site-packages/flake8")
#+end_src

** Sphinx-doc

Automatically generate and insert sphinx docstring stubs in Python code.

#+begin_src emacs-lisp :results silent
(use-package sphinx-doc
  :ensure t
  :hook (python-mode . sphinx-doc-mode)
  :config
  (setq sphinx-doc-exclude-rtype t))
#+end_src

* Emacs - A Few More Useful Configurations

#+begin_src emacs-lisp :results silent
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  (setq read-extended-command-predicate
        #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))
#+end_src

* Custom Emacs-lisp
** Add Custom Elisp Directory to load-path
#+begin_src emacs-lisp :results silent
(add-to-list 'load-path (expand-file-name "lisp/" user-emacs-directory))
#+end_src

** Miscellaneous

#+begin_src emacs-lisp :results silent
(require 'org-block-extra)
(require 'miscellaneous)
#+end_src

** Isort FIX on Window

#+begin_src emacs-lisp :results silent
(require 'py-isort-windows)
#+end_src

** Ox-Ipynb : Exporting Org-Mode Files to Jupyter Notebook Files

ox-ipynb is an extension for exporting .org to .ipynb files. See more at:
https://github.com/jkitchin/ox-ipynb

#+begin_src emacs-lisp :results silent
(require 'ox-ipynb)
#+end_src

The export of .org to .ipynb with ox-ipynb won't work with regular python
source blocks in org, and we use this because we override the base python with
jupyter kernels. This github issue:
https://github.com/jkitchin/ox-ipynb/issues/13 provides a work around.
Although it says it might delete output blocks, it hasn't been an issue for me
so far.

#+begin_src emacs-lisp :results silent
(push '(python . (kernelspec . ((display_name . "Python 3")
                                (language . "python")
                                (name . "python3"))))
      ox-ipynb-kernelspecs)

(push '(python . (language_info . ((codemirror_mode . ((name . ipython)
                                                      (version . 3)))
                                   (file_extension . ".py")
                                   (mimetype . "text/x-python")
                                   (name . "python")
                                   (nbconvert_exporter . "python")
                                   (pygments_lexer . "ipython3")
                                   (version . "3.5.2"))))
      ox-ipynb-language-infos)
#+end_src

** Iscroll : Smoother Scrolling Over Images

#+begin_src emacs-lisp :results silent
(require 'iscroll)
#+end_src

** A Pseudo-Presentation Mode

Add a pseudo-presentation mode and a toggle function to turn it on/off

#+begin_src emacs-lisp :results silent
(defun toggle-presentation-mode ()
  "Toggle on/off presentation mode."
  (interactive)
  (if (get 'toggle-pm 'state)
      (progn
        (presentation-mode-off)
        (put 'toggle-pm 'state nil))
    (progn
      (presentation-mode-on)
      (put 'toggle-pm 'state t))))

(defun presentation-mode-on ()
  "Toggle on presentation mode."
  (interactive)
  (org-toggle-emphasis)
  (global-display-line-numbers-mode -1)
  (visual-line-mode -1)
  (centered-window-mode t))

(defun presentation-mode-off ()
  "Toggle off presentation mode."
  (interactive)
  (org-toggle-emphasis)
  (global-display-line-numbers-mode t)
  (visual-line-mode t)
  (centered-window-mode -1))
#+end_src
** Window Transparency Toggle

Add a transparency toggle-transparency for .80 alpha

#+begin_src emacs-lisp :results silent
(defun toggle-transparency ()
  "Toggle transparent windows on/off."
  (interactive)
  (let ((alpha (frame-parameter nil 'alpha)))
    (if (eq
     (if (numberp alpha)
         alpha
       (cdr alpha)) ; may also be nil
     100)
    (set-frame-parameter nil 'alpha '(95 . 0))
    (set-frame-parameter nil 'alpha '(100 . 100)))))
#+end_src
** Arrayify

"Arrayify" function for quickly making lists of unmarked things

#+begin_src emacs-lisp :results silent
(defun arrayify (start end quote)
  "Turn strings on newlines into a QUOTEd, comma-separated one-liner."
  (interactive "r\nMQuote: ")
  (let ((insertion
         (mapconcat
          (lambda (x) (format "%s%s%s" quote x quote))
          (split-string (buffer-substring start end)) ", ")))
    (delete-region start end)
    (insert insertion)))
#+end_src

* Final Calls

Any call we want to make before the config ends

** Dark

Let's make sure to start with our [[*Color Themes][dark theme]]

#+begin_src emacs-lisp :results silent
(dark)
#+end_src

* KEYBINDINGS

#+begin_src emacs-lisp :results silent
;; General
(global-unset-key (kbd "C-z")) ;; Unset minimize
(global-set-key "\C-x\C-b" 'buffer-menu) ;; replace list-buffers with buffer-menu
(global-set-key (kbd "C-c b") 'previous-buffer)
(global-set-key (kbd "C-c n") 'next-buffer)
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "C-a") 'beginning-of-indent-or-line)
(global-set-key (kbd "C-c C-w") 'toggle-presentation-mode)
;; Org-mode
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "M-n") 'org-babel-next-src-block)
(global-set-key (kbd "M-p") 'org-babel-previous-src-block)
(org-defkey org-mode-map (kbd "M-P") 'org-insert-block-above)
(org-defkey org-mode-map (kbd "M-N") 'org-insert-block-below)
(org-defkey org-mode-map (kbd "M-D") 'org-kill-block)
(org-defkey org-mode-map (kbd "M-W") 'org-copy-block)
(org-defkey org-mode-map (kbd "C-c c") 'org-execute-block-in-shell)
(org-defkey org-mode-map (kbd "C-c e") 'org-execute-line-in-shell)
(org-defkey org-mode-map (kbd "C-c C-x t") 'org-babel-toggle-results-below-point)
(define-key org-mode-map (kbd "C-c m") 'org-toggle-emphasis)
(org-defkey org-mode-map (kbd "C-c C-x j") 'org-show-just-me)
(org-defkey org-mode-map (kbd "C-c C-x n") 'org-show-next)
;; (org-defkey org-mode-map (kbd "C-c f") 'format-src-block)
(org-defkey org-mode-map (kbd "C-x :") 'setup-report-refresh-buffer)
(org-defkey jupyter-org-interaction-mode-map (kbd "M-q")
            'python-docstring-fill)
;; Org-roam
(global-set-key (kbd "C-c r I") 'org-id-get-create)
#+end_src
